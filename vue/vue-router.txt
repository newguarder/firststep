使用vue-router
组件-->映射到路由中-->告诉路由渲染位置
HTML部分
使用<router-link></router-link>导航
to属性指定链接，默认的router-link标签会被渲染成为一个a标签。
<router-view></router-view>是路由出口，路由将被渲染到这里。

JavaScript部分
导入vue VueRouter 调用Vue.use(VueRouter)

定义路由组件
const routes=[]       
 是一个数组，数组中每一个元素是一个对象，对象中包括路径，组件，以及对应的name属性，name属性默认为default
 name属性定义了这个路由将渲染到那个router-view中 与之匹配的是给router-view设置name属性，没有name属性，默认为default；

创建路由实例,传递路由参数配置
const router = new VueRouter({
    routes
})

this.$router访问路由器、
this.$router.go()
this.$router.push()
this.$routes访问当前路由

动态路由
动态路由参数以冒号开头
例如不同的用户渲染同一个组件的时候
user/11和user/22渲染的就是同一个组件
当动态路由匹配到一个路由的时候，参数值就会被设置到this.$route.params上

嵌套路由
路由中由嵌套的路由设置children属性，
注意！！！！path路径带/  会被当做根路径
父组件中嵌套子组件，可以嵌套多层路由

编程式导航
点击了 route-link (声明式路由)就相当于 router.push(编程式)
router.push的参数可以是一个字符串或者是一个描述地址的对象
router.puhs('home')
router.push({ path : 'home' })


const userId = '123'
router.push({ name: 'user', params: { userId }})         // -> /user/123
router.push({ path: `/user/${userId}` })                 // -> /user/123
            // 这里的 params 不生效
router.push({ path: '/user', params: { userId }})        // -> /user


router.replace()于router.push不同的是他不会向history中添加数据而是取代。
<router-link to="" replace></router-link>       //声明式
router.replace()                                //编程式

router.go(n)
参数是一个整数，意思是 在浏览器的history中历史记录前进或者倒退多少步。
window.history.go(n)

router.go(1)==history.foword()
router.go(-1)==history.back()
rouer.go(3)  //浏览器前进三步，没有就失败。

命名路由  就是给路由添加了一个 name属性 用来标识

//声明式
<router-link :to="{ name: 'user', params: { userId: 123 }}">User</router-link>
//编程式
router.push({ name: 'user', params: { userId: 123 }})

命名视图
对router-view设置name属性 默认未default 使得一个页面中有多个视图多个<router-view></router-view>
一个路由对应多个组件就需要对这多个组件正确声明
路由中的component 有多个路由加's'
const router = new VueRouter({
  routes: [
    {
      path: '/',
      components: {
        default: Foo,
        a: Bar,
        b: Baz
      }
    }
  ]
})

路由对象  即 this.$route